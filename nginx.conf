user www-data;
worker_processes auto;

events {
  worker_connections 2048;
  use epoll;
  multi_accept on;
}

http {
  access_log /dev/stdout;
  error_log /dev/stdout;

  gzip on;
  gzip_min_length 1100;
  gzip_buffers 4 8k;
  gzip_types text/html text/css application/javascript application/json
             image/svg+xml image/jpeg image/png image/gif image/webp
             text/xml application/atom+xml application/rss+xml;
  sendfile            on;
  tcp_nopush          on;
  tcp_nodelay         on;
  keepalive_timeout   65;
  types_hash_max_size 2048;

  include      /etc/nginx/mime.types;
  default_type application/octet-stream;

  upstream webserver {
    server web:3000;
  }

  upstream apiserver {
    server api:5000;
  }

  server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name "";
    return 444;
  }

  server {
    listen 80;
    listen [::]:80;
    server_name focal.pics local.pics;

    location / {
      proxy_pass http://webserver;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
  }

  server {
    listen 80;
    listen [::]:80;
    server_name api.focal.pics api.local.pics;

    valid_referers none blocked server_names focal.pics local.pics;
    if ($invalid_referer) {
      return 403;
    }

    # use this block if you specify "socket" in api/uwsgi.ini
    # location ~ / {
    #   include uwsgi_params;
    #   uwsgi_pass apiserver;
    # }

    location ~ / {
      proxy_pass http://apiserver;
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
  }

  server {
    listen 80;
    listen [::]:80;
    server_name cdn.focal.pics cdn.local.pics;

    valid_referers none blocked server_names focal.pics local.pics;
    if ($invalid_referer) {
      return 403;
    }

    root /storage;

    location ~* ^.+\.jpg$ {
      # allow public access to JPG files
      try_files $uri $uri =404;
    }

    location ~ .+(?<!\.jpg)$ {
      # require authorization to download raw and sidecar files
      auth_basic "Restricted Content";
      auth_basic_user_file /etc/nginx/.htpasswd;

      try_files $uri $uri =404;
    }
  }
}
